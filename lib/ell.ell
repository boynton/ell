;
; macros and non-core definitions to the Ell language
;

;;
;; shortcuts for accessing lists
;;
(define (caar p) (car (car p)))
(define (cadr p) (car (cdr p)))
(define (cdar p) (cdr (car p)))
(define (cddr p) (cdr (cdr p)))
(define (caaar p) (car (car (car p))))
(define (caadr p) (car (car (cdr p))))
(define (cadar p) (car (cdr (car p))))
(define (caddr p) (car (cdr (cdr p))))
(define (cdaar p) (cdr (car (car p))))
(define (cdadr p) (cdr (car (cdr p))))
(define (cddar p) (cdr (cdr (car p))))
(define (cdddr p) (cdr (cdr (cdr p))))
(define (caaaar p) (car (car (car (car p)))))
(define (caaadr p) (car (car (car (cdr p)))))
(define (caadar p) (car (car (cdr (car p)))))
(define (caaddr p) (car (car (cdr (cdr p)))))
(define (cadaar p) (car (cdr (car (car p)))))
(define (cadadr p) (car (cdr (car (cdr p)))))
(define (caddar p) (car (cdr (cdr (car p)))))
(define (cadddr p) (car (cdr (cdr (cdr p)))))
(define (cdaaar p) (cdr (car (car (car p)))))
(define (cdaadr p) (cdr (car (car (cdr p)))))
(define (cdadar p) (cdr (car (cdr (car p)))))
(define (cdaddr p) (cdr (car (cdr (cdr p)))))
(define (cddaar p) (cdr (cdr (car (car p)))))
(define (cddadr p) (cdr (cdr (car (cdr p)))))
(define (cdddar p) (cdr (cdr (cdr (car p)))))
(define (cddddr p) (cdr (cdr (cdr (cdr p)))))

;; defmacro is a more convenient form. This should get pushed down as a primitive
(define-macro (defmacro expr)
   `(define-macro ~(cadr expr) (lambda (expr) (apply (lambda ~(caddr expr) ~@(cdddr expr)) (cdr expr)))))

;; should be a primitive
(defmacro def (name value)
   `(define ~name ~value))

;; shorthand for define function, should be a primitive
(defmacro defn (name args & body)
   `(define ~name (lambda ~args ~@body)))

;; or returns the first non-false item in the list
(defmacro or ops
  (if (empty? ops)
      false
      (let loop ((c (car ops)) (r (cdr ops)))
        (if (empty? r)
            c
            `(let ((tmp ~c)) (if tmp tmp ~(loop (car r) (cdr r))))))))

;; and returns the first false item in the list, or the last item in the list of all are non-false
(defmacro and ops
  (if (empty? ops)
      true
      (let loop ((c (car ops)) (r (cdr ops)))
        (if (empty? r)
            c
            `(let ((tmp ~c)) (if (not tmp) false ~(loop (car r) (cdr r))))))))

;; validate-struct checks a struct against a set of fields
(defn validate-struct (val name fields)
  (if (empty? fields)
      val
      (if (null? ((car fields) val))
          (error "cannot convert to " name ", missing field: " (car fields))
          (validate-struct val name (cdr fields)))))

;;
;; Defines a struct type by emitting a constructor and a predicate
;; The fields are a sequence key/value pairs, and the resulting constructor limits
;; the arguments to those indicated, with the given default values
;; i.e.
;;   (defstruct point x: 0 y: 0) ; this defines a struct with an and a y field with default value of 0
;;   (point) => #point{x: 0, y: 0}
;;   (point? (point)) => true
;;   (point x: 23 y: 57) => #point{x: 23, y: 57}
;;   (point x: 23 y: 57 z: 100) => error("z: bad keyword parameter")
;;   (point-fields) -> (x: y:)
;;You can get the raw struct from it:
;;   (struct #point{x: 23, y: 57}) => {x: 23, y: 57}
;;
(defmacro defstruct (sym & fields)
  (defn extract-keys (args)
    (let loop ((keys '()) (remaining args))
      (if (empty? remaining)
          (reverse keys)
          (let ((sym (car remaining)))
            (if (keyword? sym)
                (loop (cons sym keys) (cddr remaining))
                (loop keys (cdr remaining)))))))
  (let ((keys (extract-keys fields)))
    `(begin
       (defn ~sym args (apply instance (concat '(~sym ~@fields) (normalize-keyword-args args ~@keys))))
       (defn ~(symbol sym "?") (o) (equal? (type o) (quote ~sym)))
       (defn ~(symbol sym "-fields") () '~keys)
       (defn ~(symbol "as-" sym) (o)
         (instance '~sym (validate-struct o '~sym '~keys)))
       (quote ~sym))))

;;
;; Map a function over a list. Each argument is list, and for N lists, the function is called
;; with the N elements of the lists as args, then again for the next set of args, etc.
;;
(defn map (fun first & rest)
  (defn map1 (fun lst)
    (if (empty? lst) '()
        (cons (fun (car lst)) (map1 fun (cdr lst)))))
  (defn any-empty? (list-of-lists)
    (if (empty? list-of-lists)
        false
        (if (empty? (car list-of-lists))
            true
            (any-empty? (cdr list-of-lists)))))
  (defn mapn (fun arglist)
    (let loop ((result '()) (args arglist))
      (if (any-empty? args)
          (reverse result)
          (loop (cons (apply fun (map1 car args)) result) (map1 cdr args)))))
  (if (empty? rest)
      (map1 fun first)
      (mapn fun (cons first rest))))
