;;
;; macros and non-core definitions to the Ell language
;;

;;
;; shortcuts for accessing lists
;;
(defn caar (p) (car (car p)))
(defn cadr (p) (car (cdr p)))
(defn cdar (p) (cdr (car p)))
(defn cddr (p) (cdr (cdr p)))
(defn caaar (p) (car (car (car p))))
(defn caadr (p) (car (car (cdr p))))
(defn cadar (p) (car (cdr (car p))))
(defn caddr (p) (car (cdr (cdr p))))
(defn cdaar (p) (cdr (car (car p))))
(defn cdadr (p) (cdr (car (cdr p))))
(defn cddar (p) (cdr (cdr (car p))))
(defn cdddr (p) (cdr (cdr (cdr p))))
(defn caaaar (p) (car (car (car (car p)))))
(defn caaadr (p) (car (car (car (cdr p)))))
(defn caadar (p) (car (car (cdr (car p)))))
(defn caaddr (p) (car (car (cdr (cdr p)))))
(defn cadaar (p) (car (cdr (car (car p)))))
(defn cadadr (p) (car (cdr (car (cdr p)))))
(defn caddar (p) (car (cdr (cdr (car p)))))
(defn cadddr (p) (car (cdr (cdr (cdr p)))))
(defn cdaaar (p) (cdr (car (car (car p)))))
(defn cdaadr (p) (cdr (car (car (cdr p)))))
(defn cdadar (p) (cdr (car (cdr (car p)))))
(defn cdaddr (p) (cdr (car (cdr (cdr p)))))
(defn cddaar (p) (cdr (cdr (car (car p)))))
(defn cddadr (p) (cdr (cdr (car (cdr p)))))
(defn cdddar (p) (cdr (cdr (cdr (car p)))))
(defn cddddr (p) (cdr (cdr (cdr (cdr p)))))

;; or returns the first non-false item in the list
(defmacro or (& ops)
  (if (empty? ops)
      false
      (let loop ((c (car ops)) (r (cdr ops)))
        (if (empty? r)
            c
            `(let ((tmp ~c)) (if tmp tmp ~(loop (car r) (cdr r))))))))

;; and returns the first false item in the list, or the last item in the list of all are non-false
(defmacro and (& ops)
  (if (empty? ops)
      true
      (let loop ((c (car ops)) (r (cdr ops)))
        (if (empty? r)
            c
            `(let ((tmp ~c)) (if (not tmp) false ~(loop (car r) (cdr r))))))))

;; returns a list consisting of the first N items of another list
(defn take (n lst)
  (if (or (empty? lst) (<= n 0))
      '()
      (cons (car lst) (take (- n 1) (cdr lst)))))

;;
;; Map a function over a list. Each argument is list, and for N lists, the function is called
;; with the N elements of the lists as args, then again for the next set of args, etc.
;;
(defn map (fun first & rest)
  (defn map1 (fun lst)
    (if (empty? lst)
        '()
        (let ((head (fun (car lst))))
          (cons head (map1 fun (cdr lst))))))
  (defn any-empty? (list-of-lists)
    (if (empty? list-of-lists)
        false
        (if (empty? (car list-of-lists))
            true
            (any-empty? (cdr list-of-lists)))))
  (defn mapn (fun arglist)
    (let loop ((result '()) (args arglist))
      (if (any-empty? args)
          (reverse result)
          (let ((head (apply fun (map1 car args))))
            (loop (cons head result) (map1 cdr args))))))
  (if (empty? rest)
      (map1 fun first)
      (mapn fun (cons first rest))))

;;
;; reduce
;;
(defn reduce (f val lst)
  (if (empty? lst)
      val
      (reduce f (f val (car lst)) (cdr lst))))

;;(defn reduce (fun init coll)
;;  (let loop ((result init) (remaining coll))
;;    (if (empty? remaining)
;;        result
;;        (loop (fun result (car remaining)) (cdr remaining)))))

;;
;; Create a type based on some other type, from the predicate
;; i.e. 
;;   ? (deftype foo (s) (and (string? s) (< (string-length s) 3)))
;;   = <foo>
;;   ? (foo "abc")
;;    *** not a valid <foo>: "abc"
;;   ? (foo "ab")
;;   = #<foo>{value: "ab"}
;;   ? (foo? (foo "ab"))
;;   = true
;;   ? (def s "xy")
;;   = "xy"
;;   ? (def f (foo s))
;;   = #<foo>"xy"
;;   ? (identical? s (value f))
;;   = true
;;
;; This aggregates the parameter, so the result is a struct, but correctness is determined by the
;; predicate, instead of matching fields of another struct like defstruct does.
;;
(defmacro deftype (sym args & predicate-body)
  (let ((typesym (symbol "<" sym ">"))
        (arg (car args)))
    `(do
       (defn ~(symbol sym "?") (o) (identical? (type o) ~typesym))
       (defn ~sym ~args
         (if (not ~@predicate-body)
             (error syntax-error: ~(string "not a valid " typesym ": ") (write ~arg)))
         (instance ~typesym ~(car args)))
       ~typesym)))


;;
;; Defines a struct type by emitting a constructor and a predicate based on a list of fields.
;; The fields are a sequence key/value pairs, where the value is the type of the field, 
;; and the resulting constructor limits the arguments to those indicated, with the given
;; default values. The values in the field spec are default values, so make sure you *want*
;; to share that value across instances. The type of the field is inferred from the default value.
;;
;; For example:
;;   (defstruct point x: <number> y: <number>) => <point>
;;   (point) => #<point>{x: 0, y: 0}
;;   (point? (point)) => true
;;   (point x: 23 y: 57) => #<point>{x: 23, y: 57}
;;   (point x: 23 y: 57 z: 100) =>  *** [point] z: bad keyword parameter. Allowed keys: [x: y:]
;;   (point-fields) -> (x: y:)
;;   (point-types) -> {x: <number> y: <number>)
;;   (point-defaults) -> {x: 0 y: 0}
;;
;; You can get the equivalent struct back (it is a copy, since the constructor always makes a new instance):
;;   (value #<point>{x: 23, y: 57}) => {x: 23, y: 57}
;;   (def data {x: 1 y: 2}) = {x: 23, y: 57}
;;   (equal? data (value (point data))) => true
;;   (identical? data (value (point data))) => false
;;
(defmacro defstruct (sym & keyargs)
  (defn extract-keys (args)
    (let loop ((keys '()) (remaining args))
      (if (empty? remaining)
          (reverse keys)
          (let ((sym (car remaining)))
            (if (keyword? sym)
                (loop (cons sym keys) (cddr remaining))
                (loop keys (cdr remaining)))))))

  (defn validate-types (lst)
    (if (empty? lst)
        true
        (and (type? (car lst)) (validate-types (cdr lst)))))
  (let ((fields (apply struct keyargs)) ;; {x: <number> y: <number>}
        (typesym (symbol "<" sym ">")))
    (let ((keywords (keys fields)) (types (values fields)))
      (if (not (validate-types types))
          (error syntax-error: "defstruct: one or more fields has an invalid <type>: " fields))
    `(do
       (defn ~sym args (instance ~typesym (validated-struct (apply struct (validate-keyword-arg-list args ~@keywords)) ~typesym '~keywords '~fields)))
       (defn ~(symbol sym "?") (o) (equal? (type o) ~typesym))
       (defn ~(symbol sym "-fields") () ~fields)
       (defn ~(symbol "as-" sym) (o) (instance '~typesym (validated-struct o ~typesym '~keywords '~fields)))
       ~typesym))))

;;
;; i.e. (validated-struct {x: 1} '(x: y:))
;; error if the val has fields not in the list
;;
(defn validated-struct (val name names types)
  (if (empty? names)
      val
      (let ((v ((car names) val)))
        (if (null? v)
            (error validation-error: (string "type " name " missing field " (car names) " " (write val)))
            (let ((reftype ((car names) types)))
              (if (and (not (identical? reftype <any>)) (not (identical? (type v) reftype)))
                (error validation-error: (string "type " name " field " (car names) " not a " ((car names) types) ": " (write v)))
                (validated-struct val name (cdr names) types)))))))

;;
;; generic functions dispatch to methods based on argument type
;;
(defstruct generic-function
  name: <symbol>
  args: <list>
  methods: <struct>)

;; All generic function definitions are stored in this dynamic variable
(def *genfns* {})

;;
;; declares the specified symbol to be a generic dispatch function for the given arguments
;;
(defmacro defgeneric (name args)
  (let ((gf (generic-function name: name args: args methods: {})))
    (put! *genfns* name gf)
    `(def ~name (fn ~args ((getfn '~name ~@args) ~@args)))))

;; show the methods for the generic function
(defn methods (sym)
  (let ((gf (get *genfns* sym)))
    (if (not (null? gf))
        (methods: gf))))
;        (map car (to-list (methods: gf))))))

;;
;; Adds a method for the specialized args to the generic function
;;
(defn add-method (sym specialized-args fun)
  (defn method-arg-names (args)
    (map (fn (item) (if (symbol? item) item (car item))) args))
  (let ((gf (get *genfns* sym)))
    (if (null? gf)
        (error argument-error: "Not a generic function: " sym))
    (letrec ((methods (methods: gf))
             (names (method-arg-names specialized-args))
             (key (method-signature specialized-args)))
      (put! methods key fun)
      sym)))

;;
;; defmethod - defines a method for the generic function with the specialized types
;;
(defmacro defmethod (sym specialized-args & body)
  (let ((names (map (fn (item) (if (symbol? item) item (car item))) specialized-args))
        (gf (get *genfns* sym)))
    (if (def? sym)
        (if (not (generic-function? gf))
            (error argument-error: sym " is already defined to something other than a generic function"))
        (error argument-error: sym " is is not defined as a generic function"))
    `(add-method '~sym '~specialized-args (fn ~names ~@body))))

;; range-arguments - the various optional and default values for the 3 range argument patters
(defn range-arguments (args) 
  (let ((argc (list-length args)))
    (cond
     ((= argc 0)
      (error argument-error: "infinite ranges not supported"))
     ((= argc 1)
      (list 0 (car args) 1))
     ((= argc 2)
      (list (car args) (cadr args) 1))
     ((= argc 3)
      (list (car args) (cadr args) (caddr args)))
     (else
      (error argument-error: "wrong number of args for range: " argc)))))

;;
;; execute the body once for each value in the specified range.
;; i.e.
;; (dorange (sym end) ...)
;; (dorange (sym start end) ...)
;; (dorange (sym start end step) ...)
;;
(defmacro dorange (init & body)
  (let ((sym (car init)) (args (range-arguments (cdr init))))
    (if (>= (caddr args) 0)
        `(let loop ((~sym ~(car args))) (if (< ~sym ~(cadr args)) (do ~@body (loop (+ ~sym ~(caddr args))))))
        `(let loop ((~sym ~(car args))) (if (> ~sym ~(cadr args)) (do ~@body (loop (+ ~sym ~(caddr args)))))))))

;;
;; execute the body once for each value in the list.
;;
(defmacro dolist (init & body)
  (let ((sym (car init)) (lst (cadr init)) (symlst (symbol (car init) "-list")))
    `(let loop ((~symlst ~lst)) (if (empty? ~symlst) null (let ((~sym (car ~symlst))) ~@body (loop (cdr ~symlst)))))))

;;
;; execute the body once for each value in the vector.
;;
(defmacro dovector (init & body)
  (let ((sym (car init)))
    (if (not (= (list-length init) 2))
        (error syntax-error: `(dovector ~init ~@body))
        `(let ((dovecval ~(cadr init)))
           (dorange (dovecidx (vector-length dovecval)) (let ((~sym (vector-ref dovecval dovecidx))) ~@body))))))


;;
;; Simple error handling. An error object is defined with a keyword and a data item
;;
(def *top-handler* null)

(defn throw (err)
  (if (null? *top-handler*)
      (uncaught-error err)
      (*top-handler* err)))

(defn error (& data)
  (throw (apply make-error data)))

;; and catch simply is callcc that defines throw in the lexical scope of your code.
(defmacro catch (& body)
  `(callcc
    (fn (_handler_)
      (let ((_prev_handler_ *top-handler*))
        (set! *top-handler*
            (fn (err)
              (set! *top-handler* _prev_handler_)
              (_handler_ err)))
        ~@body))))


;;
;; length - a generic function example
;;
(defgeneric length (seq))
(defmethod length ((lst <list>)) (list-length lst))
(defmethod length ((vec <vector>)) (vector-length vec))
(defmethod length ((str <string>)) (string-length str))
(defmethod length ((strct <struct>)) (struct-length strct))

(defn sum (& args)
  (reduce + 0 args))

(defn product (& args)
  (reduce * 1 args))
