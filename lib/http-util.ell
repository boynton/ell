;; ---------------------------

(defn http-ok (obj)
  {status: 200 headers: {"Content-type" "application/json"} body: (json obj)})

(defn http-created (loc obj)
  {status: 201 headers: {"Content-type" "application/json" "Location" loc} body: (json obj)})

(defn http-no-content ()
  {status: 204})
  
(defn http-fail (status data)
  (let ((d {status: status data: data}))
    {status: status headers: {"Content-type" "application/json"} body: (json d)}))

(defn http-not-found-handler ()
  (http-fail 404 "Not found"))

(defn http-not-yet-implemented-handler ()
  (http-fail 501 "Not yet implemented"))


(defn http-match-path (path template params)
  (if (empty? path)
      (if (empty? template)
          (reverse params)
          null)
      (if (empty? template)
          null
          (let ((item (car template)))
            (if (keyword? item)
                (http-match-path (cdr path) (cdr template) (cons (car path) params))
                (if (equal? item (car path))
                    (http-match-path (cdr path) (cdr template) params)))))))


(defn http-requires-body? (method)
  (or (equal? "POST" method) (equal? "PUT" method)))

(defn http-match (method path body handlers)
  (let ((plen (length path)))
    (let loop ((lst (get handlers method)))
      (if (empty? lst)
          null
          (let ((h (car lst)))
            (if (= (length (path: h)) plen)
                (let ((r (http-match-path path (path: h) '())))
                  (if (not (null? r))
                      (if (http-requires-body? method)
                          {params: (reverse (cons (read (to-string body)) (reverse r))) handler: (handler: h)}
                          {params: r handler: (handler: h)})
                      (loop (cdr lst))))
                (loop (cdr lst))))))))

(defn http-route (request handlers)
  (let ((method (method: request)))
    (let ((resource (http-match method (cdr (split (path: request) "/")) (body: request) handlers)))
      (if (not (null? resource))
          (apply (handler: resource) (params: resource))
          (http-not-found-handler)))))

;;BUG: the serve primitive cannot handle closures as its request handler argument. That function must not have an env.
;;workaround: assign the handlers to a global variable that the fn refers to.
(def static-handler null)
(defn http-serve (port handlers)
  (set! static-handler handlers)
  (serve port (fn (request)
    (let ((res (catch (http-route request static-handler))))
      (if (error? res)
          (do
             (println "Server Error: " res)
             (http-fail 500 (error-data res)))
        res)))))
