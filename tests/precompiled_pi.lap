(lap (closure (function 2 (literal 1) (local 0 1) (local 0 0) (global quotient) (call 2) (global +) (call 2) (setlocal 0 0) (pop) (literal 1000) (literal 3322) (local 0 1) (global *) (call 2) (local 0 0) (global *) (call 2) (global quotient) (call 2) (closure (function 1 (literal 2) (local 0 0) (literal 1) (global +) (call 2) (global make-vector) (call 2) (literal false) (closure (function 1 (closure (function 2 (local 3 1) (local 0 0) (global >=) (call 2) (jumpfalse 6) (local 0 1) (return) (local 0 1) (literal 10) (global *) (call 2) (local 0 0) (literal 1) (global +) (call 2) (local 1 0) (tailcall 2))) (setlocal 0 0) (pop) (literal 1) (literal 0) (local 0 0) (tailcall 2))) (call 1) (closure (function 2 (literal 4) (local 1 0) (local 0 1) (global vector-set!) (call 3) (pop) (literal false) (closure (function 1 (closure (function 3 (local 4 0) (local 0 2) (global >) (call 2) (jumpfalse 5) (literal false) (return) (literal false) (closure (function 1 (closure (function 1 (local 0 0) (global zero?) (call 1) (jumpfalse 5) (literal false) (return) (local 4 0) (local 0 0) (local 4 1) (global vector-ref) (call 2) (global *) (call 2) (local 2 1) (global +) (call 2) (setlocal 2 1) (pop) (local 0 0) (literal 2) (global *) (call 2) (literal 1) (global +) (call 2) (closure (function 1 (local 0 0) (local 3 1) (global remainder) (call 2) (local 1 0) (local 5 1) (global vector-set!) (call 3) (pop) (local 0 0) (local 3 1) (global quotient) (call 2) (local 1 0) (global *) (call 2) (setlocal 3 1) (return))) (call 1) (pop) (literal 1) (local 0 0) (global -) (call 2) (local 1 0) (tailcall 1))) (setlocal 0 0) (pop) (local 4 0) (local 0 0) (tailcall 1))) (call 1) (pop) (local 2 0) (local 0 1) (global quotient) (call 2) (local 0 0) (global +) (call 2) (global number->string) (call 1) (closure (function 1 (literal false) (closure (function 1 (closure (function 1 (local 7 1) (local 0 0) (global >=) (call 2) (jumpfalse 9) (local 2 0) (global display) (tailcall 1) (literal "0") (global display) (call 1) (pop) (local 0 0) (literal 1) (global +) (call 2) (local 1 0) (tailcall 1))) (setlocal 0 0) (pop) (local 1 0) (global string-length) (call 1) (local 0 0) (tailcall 1))) (tailcall 1))) (call 1) (pop) (literal 10) (local 0 2) (global modulo) (call 2) (global zero?) (call 1) (jumpfalse 6) (literal "\n") (jump 4) (literal " ") (global display) (call 1) (pop) (local 0 2) (literal 1) (global +) (call 2) (literal 0) (local 2 0) (local 0 1) (global remainder) (call 2) (local 1 0) (tailcall 3))) (setlocal 0 0) (pop) (literal 1) (literal 0) (literal 2) (local 0 0) (tailcall 3))) (call 1) (pop) (global newline) (tailcall 0))) (tailcall 2))) (tailcall 1))) (defglobal pi) (pop) (literal 5) (literal 1000) (global pi) (call 2) (return))
