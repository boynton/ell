(use midi)

(defn noteoff-after (key dur)
  (midi-sleep dur)
  (release key 0))

;; the function being spawned is a top level function, we can easily guarantee at compile time that is is safe
(defn note-good-1 (key vel dur)
  (press key vel)
  (spawn noteoff-after key dur))

;; the function is contextually a closure, but happens to not refer to any variables in the closed over environment, so it works
;; This case is harder to detect at compile time.
(defn note-good-2 (key vel dur)
  (press key vel)
  (spawn (fn (key vel dur)
           (println "Begin!")
           (println "native result: " (* 2 3))
           (midi-sleep dur) ;; BUG: this reference is to another environment! Can't work!
           (release key 0)
           (println "done!")) key vel dur))

;; this example shows the spawning of a function that is closed over an environment in the original thread -- it cannot work.
;; the non-optimized VM will check and check this for most occurrences. When optimizes, this will crash the VM (bad code!).
(defn note-bad-1 (key vel dur)
  (press key vel)
  (spawn (fn ()
           (println "Begin!")
           (println "native result: " (* 2 3))
           (midi-sleep dur) ;; BUG: this reference is to another environment! Can't work!
           (release key 0)
           (println "done!"))))

