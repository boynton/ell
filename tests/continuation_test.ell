(use assert)

(assert-equal 23
              (callcc (fn (cont)
                        (println "continuation is " cont ", call it")
                        (cont 23)
                        57))
              "continuation called value wasn't seen")

(assert-equal 57
              (callcc (fn (cont)
                        (println "continuation is " cont ", skip it")
                        '(cont 23) 57))
              "continuation skip, final value not seen")

(defn search (wanted? lst) 
  (callcc 
   (fn (return) 
     (dolist (element lst)
       (if (wanted? element)
           (return element)))
     false)))

(assert-false (search zero? '(1 2 3 4 5)) "failed search should have returned false")
(assert-equal 0 (search zero? '(1 2 0 4 5)) "search value was not zero")

(def return false)
(def normal-value
    (+ 1 (callcc 
          (fn (cont) 
            (set! return cont)
            1))))

(assert-equal 2 normal-value ": normal execution saved the continuation, but returned the last value of 1 + 1 = 2")

(assert-type return <function> ": the value of return is now set to the continuation, which is a function")

(assert-equal 23 (return 22) ": calling the continuation with an argument of 22 results in 22 + 1 = 23")

(println "[continuation_test OK]")

