(use assert)

(def chan (channel))
(assert-false (send chan 23 0) "send to nonbuffered channel with no receiver should immediately return false")
(assert-null (recv chan 0) "recv on nonbuffered channel with no sender should immediately return null")

(close chan)
(assert-false (send chan 23) "send to closed channel should return false")
(assert-null (recv chan) "recv on closed channel should return false")

(def to-back (channel))
(def to-front (channel))

;; unbuffered...
(spawn (fn (back front)
         (send front 'running)
         (let ((tmp (recv back)))
           (if (null? tmp)
               (assert false "could not receive on unbuffered channel")
               (send front tmp))))
       to-back to-front)

(assert-equal 'running (recv to-front 1)) ;;wait up to a second for the background thread to say it is running
;; it is now running
(if (send to-back 23)
    (assert-equal (recv to-front) 23 "round trip on unbuffered channel")
    (assert false "cannot send on unbuffered channel even when a receiver is waiting"))

(def to-back (channel bufsize: 1))
(def to-front (channel bufsize: 1))

(spawn (fn (back front)
         (let ((tmp (recv back)))
           (if (null? tmp)
               (assert false "could not receive on buffered channel")
               (send front tmp))))
       to-back to-front)

;;it may not be running yet, but the value will be buffered
(if (send to-back 23)
    (assert-equal (recv to-front) 23 "round trip on buffered channel")
    (assert false "cannot send on channel even when buffered"))


(def c (channel))
(spawn (fn (ch y) (send ch (+ 2 y))) c 100)
(assert-equal 102 (recv c) "simple spawn, self-contained function")

(spawn (fn (y) (send c (+ 2 y))) 200)
(assert-equal 202 (recv c) "spawned function using a shared global for the channel")

(let ((x 2))
  (spawn (fn (y) (send c (+ x y))) 300))
(assert-equal 302 (recv c 1000) "spawned function using shared channel and closed over local state")

(let ((chan (channel)) (x 2))
  (spawn (fn (y) (send chan (+ x y))) 400)
  (assert-equal 402 (recv chan 1000) "spawned function and client both closed over channel and state"))


(println "[channel_test OK]")
