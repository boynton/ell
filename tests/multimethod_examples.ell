(use ell)

(defgeneric foo (x y a))
(defmethod foo (x y a) (list "any/any/any: " x y a))
(defmethod foo ((x <number>) y a) (list "number/any/any: " x y a))
(defmethod foo ((x <number>) (y <string>) a) (list "number/string/any: " x y a))
(defmethod foo ((x <number>) (y <string>) (a <vector>)) (list "number/string/vector: " x y a))
(defmethod foo (x (y <string>) a) (list "any/string/any: " x y a))

(println (foo 1 2 3))
(println (foo 1 {} "blah"))
(println (foo 1 "hey" {}))
(println (foo 1 "hey" []))
(println (foo {} "blah" {}))
(println (foo {} {} {}))



(defgeneric area (shape))

(defstruct rect x: 0 y: 0 w: 0 h: 0)
(defmethod area ((r <rect>))
   (* (w: r) (h: r)))

(def r1 (rect w: 10 h: 20))
(println "area of " r1 " => " (area r1))

(def pi 3.1415926)
(defstruct circle x: 0 y: 0 r: 0)
(defmethod area ((c <circle>))
   (* pi (r: c) (r: c)))

(def c1 (circle r: 10))
(println "area of " c1 " => " (area c1))
