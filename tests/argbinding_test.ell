(defn test (val expected msg)
   (if (equal? val expected)
      'ok
      (error msg " FAILED: expected " expected ", encountered " val)))

;; simple calls, 0..3 parameters
(test ((fn () null)) null "(fn ())")
(test ((fn (x) x) 23) 23 "(fn (x))")
(test ((fn (x y) (list x y)) 23 57) '(23 57) "(fn (x y))")
(test ((fn (x y z) (list x y z)) 23 57 100) '(23 57 100) "(fn (x y z))")

;; binding the entire arglist to a single variable
(def fn_arglist (fn x x))
;same as (def fn_arglist (fn (& x) x))
;same as (def (fn_arglist & x) x)
(test (fn_arglist) '() "(fn_arglist)")
(test (fn_arglist 1) '(1) "(fn_arglist 1)")
(test (fn_arglist 1 2) '(1 2) "(fn_arglist 1 2)")

;; binding tail of arglist to a single variable
;; note that if there aren't enough arguments, you get empty list, not null
(defn fun_arglist (x & y) (list x y))
(test (fun_arglist 1) '(1 ()) "(fun_arglist 1)")
(test (fun_arglist 1 2) '(1 (2)) "(fun_arglist 1 2)")


(defn fun_optonly ([x]) (list x))
(test (fun_optonly) '(null) "(fun_optonly)")
(test (fun_optonly 23) '(23) "(fun_optonly 23)")
;BUG: should produce an error: (test (fun_optonly 23 57) '(23) "(fun_optonly 23 57)")

(defn fun_opt (x [y z])    (list x y z))
(test (fun_opt 1) '(1 null null) "(fun_opt 1)")
(test (fun_opt 1 2) '(1 2 null) "(fun_opt 1 2)")
(test (fun_opt 1 2 3) '(1 2 3) "(fun_opt 1 2 3)")
;BUG should error, too many args (test (fun_opt 1 2 3 4) '(1 2 3) "(fun_opt 1 2 3 4)")

(defn fun_opt_default (x [(y 23) (z 57)]) (list x y z))
(test (fun_opt_default 1) '(1 23 57) "(fun_opt_default 1)")
(test (fun_opt_default 1 2) '(1 2 57) "(fun_opt_default 1 2)")
(test (fun_opt_default 1 2 3) '(1 2 3) "(fun_opt_default 1 2 3)")

(defn fun_keyargs (x {y: 23, z 57}) (list x y z)) ; note that colons are optional, so are commas
(test (fun_keyargs 1) '(1 23 57) "(fun_keyargs 1)")
(test (fun_keyargs 1 y: 2) '(1 2 57) "(fun_keyargs 1 y: 2)")
(test (fun_keyargs 1 z: 3) '(1 23 3) "(fun_keyargs 1 z: 3)")
(test (fun_keyargs 1 y: 2 z: 3) '(1 2 3) "(fun_keyargs 1 y: 2 z: 3)")
(test (fun_keyargs 1 z: 3 y: 2) '(1 2 3) "(fun_keyargs 1 z: 3 y: 2)")

(defn fun_keyonly ({y: 23}) (list y))
(test (fun_keyonly) '(23) "(fun_keyonly)")
(test (fun_keyonly y: 100) '(100) "(fun_keyonly y: 100)")


