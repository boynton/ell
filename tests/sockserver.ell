;;
;; A simple socket server example
;;
;; The server listens on port 8080, and spawns a thread for each new accepted connection
;; The handler reads requests and writes responses until the connection closes or 5 seconds passes
;;
(def server (listen 8080))
(println "server: " server)

(defn handler (con)
  (let ((input (input: con)) (output (output: con)) (timeout 5000))
    (println "accepted: " con)
    (let loop ((req (recv input timeout)))
      (if (not (null? req))
          (do
            (println "request: " (to-string req))
            (send output (write (list "hello there" (to-string req))))
            (loop (recv input timeout)))
          (do
            (println "connection closed")
            (close input)
            (close output))))))

(defn tcp-connection? (o)
  (identical? <tcp-connection> (type o)))

(let loop ((con (recv server 10000)))
  (if (tcp-connection? con)
      (do
        (println "accepted a connection: " con)
        (spawn handler con))
      (println "[waiting...]"))
  (loop (recv server 10000)))
